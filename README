Installation (MacOS):
 - Install tesseract -> "sudo port install tesseract"
 - Install English tesseract language -> "sudo port install tesseract-eng"
 - Install spaCy dependencies:
 	- "pip install spacy"
 	- "python -m spacy download en_core_web_sm"
 - Set up virtual environment:
 	- Download get-pip.py from: https://pip.pypa.io/en/stable/installing/
 	- In the directory with that file, run "python get-pip.py"
 	- In the project directory, run "pip install pipenv"
 	- To enter virtual environment, run "pipenv shell"
 		- From here, should be able to run scripts

 Usage:
 - Adding books:
 	- To add a book, create an image for each page of the book and add these images to the "./documents/" directory in a folder labeled with the name of the book
 	- Add the metadata for the book to the "document_info.txt"; this includes the number of "content" pages (i.e. pages with relevant text) and a mapping describing the letters on each page
 	- Rename each of the pages for the book to "content_<an incrementing count>"; you should be left with, at least, a set of pages of the format "content_1," "content_2," etc., with the number incrementing based on the order of the pages

 - textualize.py:
 	- Use: Use models to extract an approximation of the text from some or all of the saved books.
 	- Process:
 		- Enter virtual environment
 		- Run "python textualize.py -d <the name of the folder of the children's book to textualize; "full" if all books in the "./documents" directory are to be newly textualized>"
	- Output: Textualized document created in "./text" directory, and text printed to console.

 - posize.py:
 	- Use: Tag a candidate text with an estimation of its parts of speech, and create visualizations of that data.
 	- Note: For a document to be posized, it must first have been textualized!
 	- Process:
 		- Enter virtual environment
 		- Run "python posize.py -p [if you would like the resultant diagram to be displayed] -d <the name of the folder of the children's book to posize; "full" if all books in the "./documents" directory are to be newly posized>"
 	- Output: Various statistics (i.e. POS counts, proportions) printed to console, figure saved to "./figures" directory

 - display.py:
 	- Use: Display various kinds of figures and visualizations of the data
 	- Note: To display the POS pie chart for a document, you must have already run posize.py on that document
 	- Note: To display the dependency diagram for a document, you must have already run textualize.py on that document
 	- Process:
 		- Enter virtual environment
 		- Run "python display.py -t <kind of display: "figures" - all pie charts, "deps" - dependency diagram for one document> -d <if -t = "deps", the name of the document for which to display dependencies>"
 	- Output:
 		- If pie charts requested, a grid of pie charts displaying percentages of POS in each textualized document
 		- If dependency graph requested, a dependency graph accessible at 'localhost:5000' (Use your browser to go to that address!)
 			- Press "Ctrl-C" to exit out of this process in the terminal window

 - statisticize.py
 	- Use: Calculate and display various kinds of statistics for one or all of the documents
 	- Note: To display the statistics for a document, you must have already run textualize.py on that document
 	- Process:
 		- Enter virtual environment
 		- Run "python statisticize.py -s [if you'd like to consider semi-colons a sentence-terminating punctuation mark] -d <the name of the folder of the children's book to statisticize; "full" if all books in the "./documents" directory are to be newly statisticized>"
 	- Output:
 		- A table displaying the relevant metrics automatically launched in the user's default internet browser
 	- Note (Metrics Displayed):
 		- 'sentences' - number of sentences in the text (approx. [complicated by lack of punctuation in certain cases])
 		- 'words' - number of words in the text (approx.)
 		- 'syllables' - number of syllables in the text (approx.)
 		- 'letters' - number of letters in the text (approx.)
 		- 'unique_words' - number of unique words in the text
 		- 'ttr' - type-token ratio (i.e. 'unique_words'/'words')
 		- 'flesh-adap' - flesch reading ease index (readability index)
 		- 'coleman' - Coleman-Liau index (readability index)
 		- 'flesch-grade' - Flesch-Kincaid grade level (readability index)
 		- 'ari' - Automated Readability Index (readability index)
 		- 'alw' - average letters per word
